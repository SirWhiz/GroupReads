{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operators\\scan.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operators\\scan.js","mtime":1524743248487},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns each\r\n * intermediate result, with an optional seed value.\r\n *\r\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\r\n * accumulation whenever the source emits a value.</span>\r\n *\r\n * <img src=\"./img/scan.png\" width=\"100%\">\r\n *\r\n * Combines together all values emitted on the source, using an accumulator\r\n * function that knows how to join a new source value into the accumulation from\r\n * the past. Is similar to {@link reduce}, but emits the intermediate\r\n * accumulations.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var ones = clicks.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.scan((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator\r\n * The accumulator function called on each source value.\r\n * @param {T|R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An observable of the accumulated values.\r\n * @method scan\r\n * @owner Observable\r\n */\r\nexport function scan(accumulator, seed) {\r\n    var hasSeed = false;\r\n    // providing a seed of `undefined` *should* be valid and trigger\r\n    // hasSeed! so don't use `seed !== undefined` checks!\r\n    // For this reason, we have to check it here at the original call site\r\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\r\n    // means they didn't provide anything or if they literally provided `undefined`\r\n    if (arguments.length >= 2) {\r\n        hasSeed = true;\r\n    }\r\n    return function scanOperatorFunction(source) {\r\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\r\n    };\r\n}\r\nvar ScanOperator = /*@__PURE__*/ (function () {\r\n    function ScanOperator(accumulator, seed, hasSeed) {\r\n        if (hasSeed === void 0) {\r\n            hasSeed = false;\r\n        }\r\n        this.accumulator = accumulator;\r\n        this.seed = seed;\r\n        this.hasSeed = hasSeed;\r\n    }\r\n    ScanOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\r\n    };\r\n    return ScanOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar ScanSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(ScanSubscriber, _super);\r\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\r\n        _super.call(this, destination);\r\n        this.accumulator = accumulator;\r\n        this._seed = _seed;\r\n        this.hasSeed = hasSeed;\r\n        this.index = 0;\r\n    }\r\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\r\n        get: function () {\r\n            return this._seed;\r\n        },\r\n        set: function (value) {\r\n            this.hasSeed = true;\r\n            this._seed = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ScanSubscriber.prototype._next = function (value) {\r\n        if (!this.hasSeed) {\r\n            this.seed = value;\r\n            this.destination.next(value);\r\n        }\r\n        else {\r\n            return this._tryNext(value);\r\n        }\r\n    };\r\n    ScanSubscriber.prototype._tryNext = function (value) {\r\n        var index = this.index++;\r\n        var result;\r\n        try {\r\n            result = this.accumulator(this.seed, value, index);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n        }\r\n        this.seed = result;\r\n        this.destination.next(result);\r\n    };\r\n    return ScanSubscriber;\r\n}(Subscriber));\r\n//# sourceMappingURL=scan.js.map\r\n",null]}