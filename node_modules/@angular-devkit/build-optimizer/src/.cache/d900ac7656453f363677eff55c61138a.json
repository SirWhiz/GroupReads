{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operators\\audit.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operators\\audit.js","mtime":1524743248347},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { tryCatch } from '../util/tryCatch';\r\nimport { errorObject } from '../util/errorObject';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n/**\r\n * Ignores source values for a duration determined by another Observable, then\r\n * emits the most recent value from the source Observable, then repeats this\r\n * process.\r\n *\r\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\r\n * duration is determined by a second Observable.</span>\r\n *\r\n * <img src=\"./img/audit.png\" width=\"100%\">\r\n *\r\n * `audit` is similar to `throttle`, but emits the last value from the silenced\r\n * time window, instead of the first value. `audit` emits the most recent value\r\n * from the source Observable on the output Observable as soon as its internal\r\n * timer becomes disabled, and ignores source values while the timer is enabled.\r\n * Initially, the timer is disabled. As soon as the first source value arrives,\r\n * the timer is enabled by calling the `durationSelector` function with the\r\n * source value, which returns the \"duration\" Observable. When the duration\r\n * Observable emits a value or completes, the timer is disabled, then the most\r\n * recent source value is emitted on the output Observable, and this process\r\n * repeats for the next source value.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounce}\r\n * @see {@link delayWhen}\r\n * @see {@link sample}\r\n * @see {@link throttle}\r\n *\r\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\r\n * that receives a value from the source Observable, for computing the silencing\r\n * duration, returned as an Observable or a Promise.\r\n * @return {Observable<T>} An Observable that performs rate-limiting of\r\n * emissions from the source Observable.\r\n * @method audit\r\n * @owner Observable\r\n */\r\nexport function audit(durationSelector) {\r\n    return function auditOperatorFunction(source) {\r\n        return source.lift(new AuditOperator(durationSelector));\r\n    };\r\n}\r\nvar AuditOperator = /*@__PURE__*/ (function () {\r\n    function AuditOperator(durationSelector) {\r\n        this.durationSelector = durationSelector;\r\n    }\r\n    AuditOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\r\n    };\r\n    return AuditOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar AuditSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(AuditSubscriber, _super);\r\n    function AuditSubscriber(destination, durationSelector) {\r\n        _super.call(this, destination);\r\n        this.durationSelector = durationSelector;\r\n        this.hasValue = false;\r\n    }\r\n    AuditSubscriber.prototype._next = function (value) {\r\n        this.value = value;\r\n        this.hasValue = true;\r\n        if (!this.throttled) {\r\n            var duration = tryCatch(this.durationSelector)(value);\r\n            if (duration === errorObject) {\r\n                this.destination.error(errorObject.e);\r\n            }\r\n            else {\r\n                var innerSubscription = subscribeToResult(this, duration);\r\n                if (innerSubscription.closed) {\r\n                    this.clearThrottle();\r\n                }\r\n                else {\r\n                    this.add(this.throttled = innerSubscription);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AuditSubscriber.prototype.clearThrottle = function () {\r\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\r\n        if (throttled) {\r\n            this.remove(throttled);\r\n            this.throttled = null;\r\n            throttled.unsubscribe();\r\n        }\r\n        if (hasValue) {\r\n            this.value = null;\r\n            this.hasValue = false;\r\n            this.destination.next(value);\r\n        }\r\n    };\r\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\r\n        this.clearThrottle();\r\n    };\r\n    AuditSubscriber.prototype.notifyComplete = function () {\r\n        this.clearThrottle();\r\n    };\r\n    return AuditSubscriber;\r\n}(OuterSubscriber));\r\n//# sourceMappingURL=audit.js.map\r\n",null]}