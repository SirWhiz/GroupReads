{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular\\cdk\\esm5\\stepper.es5.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular\\cdk\\esm5\\stepper.es5.js","mtime":1524743166839},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,_angular_cdk_keycodes,_angular_cdk_coercion,_angular_cdk_bidi,rxjs_Subject,_angular_common PURE_IMPORTS_END */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, EventEmitter, Inject, Input, NgModule, Optional, Output, TemplateRef, ViewChild, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport '@angular/forms';\nimport { BidiModule, Directionality } from '@angular/cdk/bidi';\nimport { Subject } from 'rxjs/Subject';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CdkStepLabel = /*@__PURE__*/ (function () {\n    function CdkStepLabel(template) {\n        this.template = template;\n    }\n    return CdkStepLabel;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Used to generate unique ID for each stepper component.\n */\nvar nextId = 0;\n/**\n * Change event emitted on selection changes.\n */\nvar StepperSelectionEvent = /*@__PURE__*/ (function () {\n    function StepperSelectionEvent() {\n    }\n    return StepperSelectionEvent;\n}());\nvar CdkStep = /*@__PURE__*/ (function () {\n    function CdkStep(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Whether user has seen the expanded step content or not.\n         */\n        this.interacted = false;\n        this._editable = true;\n        this._optional = false;\n        this._customCompleted = null;\n    }\n    Object.defineProperty(CdkStep.prototype, \"editable\", {\n        get: /**\n         * Whether the user can return to this step once it has been marked as complted.\n         * @return {?}\n         */ function () { return this._editable; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._editable = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStep.prototype, \"optional\", {\n        get: /**\n         * Whether the completion of step is optional.\n         * @return {?}\n         */ function () { return this._optional; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._optional = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStep.prototype, \"completed\", {\n        get: /**\n         * Whether step is marked as completed.\n         * @return {?}\n         */ function () {\n            return this._customCompleted == null ? this._defaultCompleted : this._customCompleted;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._customCompleted = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStep.prototype, \"_defaultCompleted\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Selects this step component. */\n    /**\n     * Selects this step component.\n     * @return {?}\n     */\n    CdkStep.prototype.select = /**\n     * Selects this step component.\n     * @return {?}\n     */\n        function () {\n            this._stepper.selected = this;\n        };\n    /** Resets the step to its initial state. Note that this includes resetting form data. */\n    /**\n     * Resets the step to its initial state. Note that this includes resetting form data.\n     * @return {?}\n     */\n    CdkStep.prototype.reset = /**\n     * Resets the step to its initial state. Note that this includes resetting form data.\n     * @return {?}\n     */\n        function () {\n            this.interacted = false;\n            if (this._customCompleted != null) {\n                this._customCompleted = false;\n            }\n            if (this.stepControl) {\n                this.stepControl.reset();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CdkStep.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            // Since basically all inputs of the MatStep get proxied through the view down to the\n            // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n            this._stepper._stateChanged();\n        };\n    return CdkStep;\n}());\nvar CdkStepper = /*@__PURE__*/ (function () {\n    function CdkStepper(_dir, _changeDetectorRef) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        this._linear = false;\n        this._selectedIndex = 0;\n        /**\n         * Event emitted when the selected step has changed.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * The index of the step that the focus can be set.\n         */\n        this._focusIndex = 0;\n        this._orientation = 'horizontal';\n        this._groupId = nextId++;\n    }\n    Object.defineProperty(CdkStepper.prototype, \"linear\", {\n        get: /**\n         * Whether the validity of previous steps should be checked or not.\n         * @return {?}\n         */ function () { return this._linear; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._linear = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStepper.prototype, \"selectedIndex\", {\n        get: /**\n         * The index of the selected step.\n         * @return {?}\n         */ function () { return this._selectedIndex; },\n        set: /**\n         * @param {?} index\n         * @return {?}\n         */ function (index) {\n            if (this._steps) {\n                // Ensure that the index can't be out of bounds.\n                if (index < 0 || index > this._steps.length - 1) {\n                    throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n                }\n                if (this._anyControlsInvalidOrPending(index) || index < this._selectedIndex &&\n                    !this._steps.toArray()[index].editable) {\n                    // remove focus from clicked step header if the step is not able to be selected\n                    this._stepHeader.toArray()[index].nativeElement.blur();\n                }\n                else if (this._selectedIndex != index) {\n                    this._emitStepperSelectionEvent(index);\n                    this._focusIndex = this._selectedIndex;\n                }\n            }\n            else {\n                this._selectedIndex = this._focusIndex = index;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkStepper.prototype, \"selected\", {\n        get: /**\n         * The step that is selected.\n         * @return {?}\n         */ function () { return this._steps.toArray()[this.selectedIndex]; },\n        set: /**\n         * @param {?} step\n         * @return {?}\n         */ function (step) {\n            this.selectedIndex = this._steps.toArray().indexOf(step);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkStepper.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n    /** Selects and focuses the next step in list. */\n    /**\n     * Selects and focuses the next step in list.\n     * @return {?}\n     */\n    CdkStepper.prototype.next = /**\n     * Selects and focuses the next step in list.\n     * @return {?}\n     */\n        function () {\n            this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);\n        };\n    /** Selects and focuses the previous step in list. */\n    /**\n     * Selects and focuses the previous step in list.\n     * @return {?}\n     */\n    CdkStepper.prototype.previous = /**\n     * Selects and focuses the previous step in list.\n     * @return {?}\n     */\n        function () {\n            this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n        };\n    /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n    /**\n     * Resets the stepper to its initial state. Note that this includes clearing form data.\n     * @return {?}\n     */\n    CdkStepper.prototype.reset = /**\n     * Resets the stepper to its initial state. Note that this includes clearing form data.\n     * @return {?}\n     */\n        function () {\n            this.selectedIndex = 0;\n            this._steps.forEach(function (step) { return step.reset(); });\n            this._stateChanged();\n        };\n    /** Returns a unique id for each step label element. */\n    /**\n     * Returns a unique id for each step label element.\n     * @param {?} i\n     * @return {?}\n     */\n    CdkStepper.prototype._getStepLabelId = /**\n     * Returns a unique id for each step label element.\n     * @param {?} i\n     * @return {?}\n     */\n        function (i) {\n            return \"cdk-step-label-\" + this._groupId + \"-\" + i;\n        };\n    /** Returns unique id for each step content element. */\n    /**\n     * Returns unique id for each step content element.\n     * @param {?} i\n     * @return {?}\n     */\n    CdkStepper.prototype._getStepContentId = /**\n     * Returns unique id for each step content element.\n     * @param {?} i\n     * @return {?}\n     */\n        function (i) {\n            return \"cdk-step-content-\" + this._groupId + \"-\" + i;\n        };\n    /** Marks the component to be change detected. */\n    /**\n     * Marks the component to be change detected.\n     * @return {?}\n     */\n    CdkStepper.prototype._stateChanged = /**\n     * Marks the component to be change detected.\n     * @return {?}\n     */\n        function () {\n            this._changeDetectorRef.markForCheck();\n        };\n    /** Returns position state of the step with the given index. */\n    /**\n     * Returns position state of the step with the given index.\n     * @param {?} index\n     * @return {?}\n     */\n    CdkStepper.prototype._getAnimationDirection = /**\n     * Returns position state of the step with the given index.\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            var /** @type {?} */ position = index - this._selectedIndex;\n            if (position < 0) {\n                return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n            }\n            else if (position > 0) {\n                return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n            }\n            return 'current';\n        };\n    /** Returns the type of icon to be displayed. */\n    /**\n     * Returns the type of icon to be displayed.\n     * @param {?} index\n     * @return {?}\n     */\n    CdkStepper.prototype._getIndicatorType = /**\n     * Returns the type of icon to be displayed.\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            var /** @type {?} */ step = this._steps.toArray()[index];\n            if (!step.completed || this._selectedIndex == index) {\n                return 'number';\n            }\n            else {\n                return step.editable ? 'edit' : 'done';\n            }\n        };\n    /**\n     * @param {?} newIndex\n     * @return {?}\n     */\n    CdkStepper.prototype._emitStepperSelectionEvent = /**\n     * @param {?} newIndex\n     * @return {?}\n     */\n        function (newIndex) {\n            var /** @type {?} */ stepsArray = this._steps.toArray();\n            this.selectionChange.emit({\n                selectedIndex: newIndex,\n                previouslySelectedIndex: this._selectedIndex,\n                selectedStep: stepsArray[newIndex],\n                previouslySelectedStep: stepsArray[this._selectedIndex],\n            });\n            this._selectedIndex = newIndex;\n            this._stateChanged();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CdkStepper.prototype._onKeydown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var /** @type {?} */ keyCode = event.keyCode;\n            // Note that the left/right arrows work both in vertical and horizontal mode.\n            if (keyCode === RIGHT_ARROW) {\n                this._layoutDirection() === 'rtl' ? this._focusPreviousStep() : this._focusNextStep();\n                event.preventDefault();\n            }\n            if (keyCode === LEFT_ARROW) {\n                this._layoutDirection() === 'rtl' ? this._focusNextStep() : this._focusPreviousStep();\n                event.preventDefault();\n            }\n            // Note that the up/down arrows only work in vertical mode.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel\n            if (this._orientation === 'vertical' && (keyCode === UP_ARROW || keyCode === DOWN_ARROW)) {\n                keyCode === UP_ARROW ? this._focusPreviousStep() : this._focusNextStep();\n                event.preventDefault();\n            }\n            if (keyCode === SPACE || keyCode === ENTER) {\n                this.selectedIndex = this._focusIndex;\n                event.preventDefault();\n            }\n            if (keyCode === HOME) {\n                this._focusStep(0);\n                event.preventDefault();\n            }\n            if (keyCode === END) {\n                this._focusStep(this._steps.length - 1);\n                event.preventDefault();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CdkStepper.prototype._focusNextStep = /**\n     * @return {?}\n     */\n        function () {\n            this._focusStep((this._focusIndex + 1) % this._steps.length);\n        };\n    /**\n     * @return {?}\n     */\n    CdkStepper.prototype._focusPreviousStep = /**\n     * @return {?}\n     */\n        function () {\n            this._focusStep((this._focusIndex + this._steps.length - 1) % this._steps.length);\n        };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    CdkStepper.prototype._focusStep = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            this._focusIndex = index;\n            this._stepHeader.toArray()[this._focusIndex].nativeElement.focus();\n        };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    CdkStepper.prototype._anyControlsInvalidOrPending = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            var /** @type {?} */ steps = this._steps.toArray();\n            steps[this._selectedIndex].interacted = true;\n            if (this._linear && index >= 0) {\n                return steps.slice(0, index).some(function (step) {\n                    var /** @type {?} */ control = step.stepControl;\n                    var /** @type {?} */ isIncomplete = control ?\n                        (control.invalid || control.pending || !step.interacted) :\n                        !step.completed;\n                    return isIncomplete && !step.optional;\n                });\n            }\n            return false;\n        };\n    /**\n     * @return {?}\n     */\n    CdkStepper.prototype._layoutDirection = /**\n     * @return {?}\n     */\n        function () {\n            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n        };\n    return CdkStepper;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nvar CdkStepperNext = /*@__PURE__*/ (function () {\n    function CdkStepperNext(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Type of the next button. Defaults to \"submit\" if not specified.\n         */\n        this.type = 'submit';\n    }\n    return CdkStepperNext;\n}());\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nvar CdkStepperPrevious = /*@__PURE__*/ (function () {\n    function CdkStepperPrevious(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Type of the previous button. Defaults to \"button\" if not specified.\n         */\n        this.type = 'button';\n    }\n    return CdkStepperPrevious;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CdkStepperModule = /*@__PURE__*/ (function () {\n    function CdkStepperModule() {\n    }\n    return CdkStepperModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { StepperSelectionEvent, CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, CdkStepperModule };\n//# sourceMappingURL=stepper.es5.js.map\n",null]}