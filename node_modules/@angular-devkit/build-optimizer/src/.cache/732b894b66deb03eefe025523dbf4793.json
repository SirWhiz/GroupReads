{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operators\\first.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operators\\first.js","mtime":1524743248418},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\nimport { EmptyError } from '../util/EmptyError';\r\n/**\r\n * Emits only the first value (or the first value that meets some condition)\r\n * emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Emits only the first value. Or emits only the first\r\n * value that passes some test.</span>\r\n *\r\n * <img src=\"./img/first.png\" width=\"100%\">\r\n *\r\n * If called with no arguments, `first` emits the first value of the source\r\n * Observable, then completes. If called with a `predicate` function, `first`\r\n * emits the first value of the source that matches the specified condition. It\r\n * may also take a `resultSelector` function to produce the output value from\r\n * the input value, and a `defaultValue` to emit in case the source completes\r\n * before it is able to emit a valid value. Throws an error if `defaultValue`\r\n * was not provided and a matching element is not found.\r\n *\r\n * @example <caption>Emit only the first click that happens on the DOM</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.first();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Emits the first click that happens on a DIV</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link take}\r\n *\r\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\r\n * callback if the Observable completes before any `next` notification was sent.\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\r\n * An optional function called with each item to test for condition matching.\r\n * @param {function(value: T, index: number): R} [resultSelector] A function to\r\n * produce the value on the output Observable based on the values\r\n * and the indices of the source Observable. The arguments passed to this\r\n * function are:\r\n * - `value`: the value that was emitted on the source.\r\n * - `index`: the \"index\" of the value from the source.\r\n * @param {R} [defaultValue] The default value emitted in case no valid value\r\n * was found on the source.\r\n * @return {Observable<T|R>} An Observable of the first item that matches the\r\n * condition.\r\n * @method first\r\n * @owner Observable\r\n */\r\nexport function first(predicate, resultSelector, defaultValue) {\r\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\r\n}\r\nvar FirstOperator = /*@__PURE__*/ (function () {\r\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\r\n        this.predicate = predicate;\r\n        this.resultSelector = resultSelector;\r\n        this.defaultValue = defaultValue;\r\n        this.source = source;\r\n    }\r\n    FirstOperator.prototype.call = function (observer, source) {\r\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\r\n    };\r\n    return FirstOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar FirstSubscriber = /*@__PURE__*/ (function (_super) {\r\n    __extends(FirstSubscriber, _super);\r\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\r\n        _super.call(this, destination);\r\n        this.predicate = predicate;\r\n        this.resultSelector = resultSelector;\r\n        this.defaultValue = defaultValue;\r\n        this.source = source;\r\n        this.index = 0;\r\n        this.hasCompleted = false;\r\n        this._emitted = false;\r\n    }\r\n    FirstSubscriber.prototype._next = function (value) {\r\n        var index = this.index++;\r\n        if (this.predicate) {\r\n            this._tryPredicate(value, index);\r\n        }\r\n        else {\r\n            this._emit(value, index);\r\n        }\r\n    };\r\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\r\n        var result;\r\n        try {\r\n            result = this.predicate(value, index, this.source);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        if (result) {\r\n            this._emit(value, index);\r\n        }\r\n    };\r\n    FirstSubscriber.prototype._emit = function (value, index) {\r\n        if (this.resultSelector) {\r\n            this._tryResultSelector(value, index);\r\n            return;\r\n        }\r\n        this._emitFinal(value);\r\n    };\r\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\r\n        var result;\r\n        try {\r\n            result = this.resultSelector(value, index);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        this._emitFinal(result);\r\n    };\r\n    FirstSubscriber.prototype._emitFinal = function (value) {\r\n        var destination = this.destination;\r\n        if (!this._emitted) {\r\n            this._emitted = true;\r\n            destination.next(value);\r\n            destination.complete();\r\n            this.hasCompleted = true;\r\n        }\r\n    };\r\n    FirstSubscriber.prototype._complete = function () {\r\n        var destination = this.destination;\r\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\r\n            destination.next(this.defaultValue);\r\n            destination.complete();\r\n        }\r\n        else if (!this.hasCompleted) {\r\n            destination.error(new EmptyError);\r\n        }\r\n    };\r\n    return FirstSubscriber;\r\n}(Subscriber));\r\n//# sourceMappingURL=first.js.map\r\n",null]}