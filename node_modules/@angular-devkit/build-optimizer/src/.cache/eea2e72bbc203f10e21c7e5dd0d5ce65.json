{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operators\\startWith.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operators\\startWith.js","mtime":1524743248504},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._observable_ArrayObservable,.._observable_ScalarObservable,.._observable_EmptyObservable,.._observable_concat,.._util_isScheduler PURE_IMPORTS_END */\r\nimport { ArrayObservable } from '../observable/ArrayObservable';\r\nimport { ScalarObservable } from '../observable/ScalarObservable';\r\nimport { EmptyObservable } from '../observable/EmptyObservable';\r\nimport { concat as concatStatic } from '../observable/concat';\r\nimport { isScheduler } from '../util/isScheduler';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\r\n * items emitted by the source Observable.\r\n *\r\n * <img src=\"./img/startWith.png\" width=\"100%\">\r\n *\r\n * @param {...T} values - Items you want the modified Observable to emit first.\r\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\r\n * the emissions of the `next` notifications.\r\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\r\n * emitted by the source Observable.\r\n * @method startWith\r\n * @owner Observable\r\n */\r\nexport function startWith() {\r\n    var array = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        array[_i - 0] = arguments[_i];\r\n    }\r\n    return function (source) {\r\n        var scheduler = array[array.length - 1];\r\n        if (isScheduler(scheduler)) {\r\n            array.pop();\r\n        }\r\n        else {\r\n            scheduler = null;\r\n        }\r\n        var len = array.length;\r\n        if (len === 1) {\r\n            return concatStatic(new ScalarObservable(array[0], scheduler), source);\r\n        }\r\n        else if (len > 1) {\r\n            return concatStatic(new ArrayObservable(array, scheduler), source);\r\n        }\r\n        else {\r\n            return concatStatic(new EmptyObservable(scheduler), source);\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=startWith.js.map\r\n",null]}