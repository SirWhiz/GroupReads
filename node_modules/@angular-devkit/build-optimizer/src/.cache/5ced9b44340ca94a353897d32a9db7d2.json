{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\observable\\FromEventObservable.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\observable\\FromEventObservable.js","mtime":1524743247966},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { Observable } from '../Observable';\r\nimport { tryCatch } from '../util/tryCatch';\r\nimport { isFunction } from '../util/isFunction';\r\nimport { errorObject } from '../util/errorObject';\r\nimport { Subscription } from '../Subscription';\r\nvar toString = Object.prototype.toString;\r\nfunction isNodeStyleEventEmitter(sourceObj) {\r\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\r\n}\r\nfunction isJQueryStyleEventEmitter(sourceObj) {\r\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\r\n}\r\nfunction isNodeList(sourceObj) {\r\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\r\n}\r\nfunction isHTMLCollection(sourceObj) {\r\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\r\n}\r\nfunction isEventTarget(sourceObj) {\r\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport var FromEventObservable = /*@__PURE__*/ (function (_super) {\r\n    __extends(FromEventObservable, _super);\r\n    function FromEventObservable(sourceObj, eventName, selector, options) {\r\n        _super.call(this);\r\n        this.sourceObj = sourceObj;\r\n        this.eventName = eventName;\r\n        this.selector = selector;\r\n        this.options = options;\r\n    }\r\n    /* tslint:enable:max-line-length */\r\n    /**\r\n     * Creates an Observable that emits events of a specific type coming from the\r\n     * given event target.\r\n     *\r\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\r\n     * EventEmitter events or others.</span>\r\n     *\r\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\r\n     *\r\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\r\n     * for registering event handler functions. As a second argument it takes string that indicates\r\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\r\n     * which are described in detail below. If your event target does not match any of the ones listed,\r\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\r\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\r\n     * handler functions have different names, but they all accept a string describing event type\r\n     * and function itself, which will be called whenever said event happens.\r\n     *\r\n     * Every time resulting Observable is subscribed, event handler function will be registered\r\n     * to event target on given event type. When that event fires, value\r\n     * passed as a first argument to registered function will be emitted by output Observable.\r\n     * When Observable is unsubscribed, function will be unregistered from event target.\r\n     *\r\n     * Note that if event target calls registered function with more than one argument, second\r\n     * and following arguments will not appear in resulting stream. In order to get access to them,\r\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\r\n     * passed to event handler. Output Observable will then emit value returned by project function,\r\n     * instead of the usual value.\r\n     *\r\n     * Remember that event targets listed below are checked via duck typing. It means that\r\n     * no matter what kind of object you have and no matter what environment you work in,\r\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\r\n     * of course they behave as was described above). So for example if Node.js library exposes\r\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\r\n     * a good choice.\r\n     *\r\n     * If the API you use is more callback then event handler oriented (subscribed\r\n     * callback function fires only once and thus there is no need to manually\r\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\r\n     * instead.\r\n     *\r\n     * `fromEvent` supports following types of event targets:\r\n     *\r\n     * **DOM EventTarget**\r\n     *\r\n     * This is an object with `addEventListener` and `removeEventListener` methods.\r\n     *\r\n     * In the browser, `addEventListener` accepts - apart from event type string and event\r\n     * handler function arguments - optional third parameter, which is either an object or boolean,\r\n     * both used for additional configuration how and when passed function will be called. When\r\n     * `fromEvent` is used with event target of that type, you can provide this values\r\n     * as third parameter as well.\r\n     *\r\n     * **Node.js EventEmitter**\r\n     *\r\n     * An object with `addListener` and `removeListener` methods.\r\n     *\r\n     * **JQuery-style event target**\r\n     *\r\n     * An object with `on` and `off` methods\r\n     *\r\n     * **DOM NodeList**\r\n     *\r\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\r\n     *\r\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\r\n     * it contains and install event handler function in every of them. When returned Observable\r\n     * is unsubscribed, function will be removed from all Nodes.\r\n     *\r\n     * **DOM HtmlCollection**\r\n     *\r\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\r\n     * installed and removed in each of elements.\r\n     *\r\n     *\r\n     * @example <caption>Emits clicks happening on the DOM document</caption>\r\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n     * clicks.subscribe(x => console.log(x));\r\n     *\r\n     * // Results in:\r\n     * // MouseEvent object logged to console every time a click\r\n     * // occurs on the document.\r\n     *\r\n     *\r\n     * @example <caption>Use addEventListener with capture option</caption>\r\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\r\n     *                                                                          // which will be passed to addEventListener\r\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\r\n     *\r\n     * clicksInDocument.subscribe(() => console.log('document'));\r\n     * clicksInDiv.subscribe(() => console.log('div'));\r\n     *\r\n     * // By default events bubble UP in DOM tree, so normally\r\n     * // when we would click on div in document\r\n     * // \"div\" would be logged first and then \"document\".\r\n     * // Since we specified optional `capture` option, document\r\n     * // will catch event when it goes DOWN DOM tree, so console\r\n     * // will log \"document\" and then \"div\".\r\n     *\r\n     * @see {@link bindCallback}\r\n     * @see {@link bindNodeCallback}\r\n     * @see {@link fromEventPattern}\r\n     *\r\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\r\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\r\n     * @param {string} eventName The event name of interest, being emitted by the\r\n     * `target`.\r\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\r\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\r\n     * post-process results. It takes the arguments from the event handler and\r\n     * should return a single value.\r\n     * @return {Observable<T>}\r\n     * @static true\r\n     * @name fromEvent\r\n     * @owner Observable\r\n     */\r\n    FromEventObservable.create = function (target, eventName, options, selector) {\r\n        if (isFunction(options)) {\r\n            selector = options;\r\n            options = undefined;\r\n        }\r\n        return new FromEventObservable(target, eventName, selector, options);\r\n    };\r\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\r\n        var unsubscribe;\r\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\r\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\r\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\r\n            }\r\n        }\r\n        else if (isEventTarget(sourceObj)) {\r\n            var source_1 = sourceObj;\r\n            sourceObj.addEventListener(eventName, handler, options);\r\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\r\n        }\r\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\r\n            var source_2 = sourceObj;\r\n            sourceObj.on(eventName, handler);\r\n            unsubscribe = function () { return source_2.off(eventName, handler); };\r\n        }\r\n        else if (isNodeStyleEventEmitter(sourceObj)) {\r\n            var source_3 = sourceObj;\r\n            sourceObj.addListener(eventName, handler);\r\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\r\n        }\r\n        else {\r\n            throw new TypeError('Invalid event target');\r\n        }\r\n        subscriber.add(new Subscription(unsubscribe));\r\n    };\r\n    FromEventObservable.prototype._subscribe = function (subscriber) {\r\n        var sourceObj = this.sourceObj;\r\n        var eventName = this.eventName;\r\n        var options = this.options;\r\n        var selector = this.selector;\r\n        var handler = selector ? function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i - 0] = arguments[_i];\r\n            }\r\n            var result = tryCatch(selector).apply(void 0, args);\r\n            if (result === errorObject) {\r\n                subscriber.error(errorObject.e);\r\n            }\r\n            else {\r\n                subscriber.next(result);\r\n            }\r\n        } : function (e) { return subscriber.next(e); };\r\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\r\n    };\r\n    return FromEventObservable;\r\n}(Observable));\r\n//# sourceMappingURL=FromEventObservable.js.map\r\n",null]}