{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\Subscription.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\Subscription.js","mtime":1524743247585},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START ._util_isArray,._util_isObject,._util_isFunction,._util_tryCatch,._util_errorObject,._util_UnsubscriptionError PURE_IMPORTS_END */\r\nimport { isArray } from './util/isArray';\r\nimport { isObject } from './util/isObject';\r\nimport { isFunction } from './util/isFunction';\r\nimport { tryCatch } from './util/tryCatch';\r\nimport { errorObject } from './util/errorObject';\r\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\r\n/**\r\n * Represents a disposable resource, such as the execution of an Observable. A\r\n * Subscription has one important method, `unsubscribe`, that takes no argument\r\n * and just disposes the resource held by the subscription.\r\n *\r\n * Additionally, subscriptions may be grouped together through the `add()`\r\n * method, which will attach a child Subscription to the current Subscription.\r\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\r\n * will be unsubscribed as well.\r\n *\r\n * @class Subscription\r\n */\r\nexport var Subscription = /*@__PURE__*/ (function () {\r\n    /**\r\n     * @param {function(): void} [unsubscribe] A function describing how to\r\n     * perform the disposal of resources when the `unsubscribe` method is called.\r\n     */\r\n    function Subscription(unsubscribe) {\r\n        /**\r\n         * A flag to indicate whether this Subscription has already been unsubscribed.\r\n         * @type {boolean}\r\n         */\r\n        this.closed = false;\r\n        this._parent = null;\r\n        this._parents = null;\r\n        this._subscriptions = null;\r\n        if (unsubscribe) {\r\n            this._unsubscribe = unsubscribe;\r\n        }\r\n    }\r\n    /**\r\n     * Disposes the resources held by the subscription. May, for instance, cancel\r\n     * an ongoing Observable execution or cancel any other type of work that\r\n     * started when the Subscription was created.\r\n     * @return {void}\r\n     */\r\n    Subscription.prototype.unsubscribe = function () {\r\n        var hasErrors = false;\r\n        var errors;\r\n        if (this.closed) {\r\n            return;\r\n        }\r\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\r\n        this.closed = true;\r\n        this._parent = null;\r\n        this._parents = null;\r\n        // null out _subscriptions first so any child subscriptions that attempt\r\n        // to remove themselves from this subscription will noop\r\n        this._subscriptions = null;\r\n        var index = -1;\r\n        var len = _parents ? _parents.length : 0;\r\n        // if this._parent is null, then so is this._parents, and we\r\n        // don't have to remove ourselves from any parent subscriptions.\r\n        while (_parent) {\r\n            _parent.remove(this);\r\n            // if this._parents is null or index >= len,\r\n            // then _parent is set to null, and the loop exits\r\n            _parent = ++index < len && _parents[index] || null;\r\n        }\r\n        if (isFunction(_unsubscribe)) {\r\n            var trial = tryCatch(_unsubscribe).call(this);\r\n            if (trial === errorObject) {\r\n                hasErrors = true;\r\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\r\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\r\n            }\r\n        }\r\n        if (isArray(_subscriptions)) {\r\n            index = -1;\r\n            len = _subscriptions.length;\r\n            while (++index < len) {\r\n                var sub = _subscriptions[index];\r\n                if (isObject(sub)) {\r\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\r\n                    if (trial === errorObject) {\r\n                        hasErrors = true;\r\n                        errors = errors || [];\r\n                        var err = errorObject.e;\r\n                        if (err instanceof UnsubscriptionError) {\r\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\r\n                        }\r\n                        else {\r\n                            errors.push(err);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hasErrors) {\r\n            throw new UnsubscriptionError(errors);\r\n        }\r\n    };\r\n    /**\r\n     * Adds a tear down to be called during the unsubscribe() of this\r\n     * Subscription.\r\n     *\r\n     * If the tear down being added is a subscription that is already\r\n     * unsubscribed, is the same reference `add` is being called on, or is\r\n     * `Subscription.EMPTY`, it will not be added.\r\n     *\r\n     * If this subscription is already in an `closed` state, the passed\r\n     * tear down logic will be executed immediately.\r\n     *\r\n     * @param {TeardownLogic} teardown The additional logic to execute on\r\n     * teardown.\r\n     * @return {Subscription} Returns the Subscription used or created to be\r\n     * added to the inner subscriptions list. This Subscription can be used with\r\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\r\n     * list.\r\n     */\r\n    Subscription.prototype.add = function (teardown) {\r\n        if (!teardown || (teardown === Subscription.EMPTY)) {\r\n            return Subscription.EMPTY;\r\n        }\r\n        if (teardown === this) {\r\n            return this;\r\n        }\r\n        var subscription = teardown;\r\n        switch (typeof teardown) {\r\n            case 'function':\r\n                subscription = new Subscription(teardown);\r\n            case 'object':\r\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\r\n                    return subscription;\r\n                }\r\n                else if (this.closed) {\r\n                    subscription.unsubscribe();\r\n                    return subscription;\r\n                }\r\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\r\n                    var tmp = subscription;\r\n                    subscription = new Subscription();\r\n                    subscription._subscriptions = [tmp];\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\r\n        }\r\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\r\n        subscriptions.push(subscription);\r\n        subscription._addParent(this);\r\n        return subscription;\r\n    };\r\n    /**\r\n     * Removes a Subscription from the internal list of subscriptions that will\r\n     * unsubscribe during the unsubscribe process of this Subscription.\r\n     * @param {Subscription} subscription The subscription to remove.\r\n     * @return {void}\r\n     */\r\n    Subscription.prototype.remove = function (subscription) {\r\n        var subscriptions = this._subscriptions;\r\n        if (subscriptions) {\r\n            var subscriptionIndex = subscriptions.indexOf(subscription);\r\n            if (subscriptionIndex !== -1) {\r\n                subscriptions.splice(subscriptionIndex, 1);\r\n            }\r\n        }\r\n    };\r\n    Subscription.prototype._addParent = function (parent) {\r\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\r\n        if (!_parent || _parent === parent) {\r\n            // If we don't have a parent, or the new parent is the same as the\r\n            // current parent, then set this._parent to the new parent.\r\n            this._parent = parent;\r\n        }\r\n        else if (!_parents) {\r\n            // If there's already one parent, but not multiple, allocate an Array to\r\n            // store the rest of the parent Subscriptions.\r\n            this._parents = [parent];\r\n        }\r\n        else if (_parents.indexOf(parent) === -1) {\r\n            // Only add the new parent to the _parents list if it's not already there.\r\n            _parents.push(parent);\r\n        }\r\n    };\r\n    Subscription.EMPTY = (function (empty) {\r\n        empty.closed = true;\r\n        return empty;\r\n    }(new Subscription()));\r\n    return Subscription;\r\n}());\r\nfunction flattenUnsubscriptionErrors(errors) {\r\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\r\n}\r\n//# sourceMappingURL=Subscription.js.map\r\n",null]}