{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operator\\share.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operator\\share.js","mtime":1524743248279},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_share PURE_IMPORTS_END */\r\nimport { share as higherOrder } from '../operators/share';\r\n/**\r\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\r\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\r\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\r\n *\r\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\r\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\r\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\r\n * re-emit \"test\" to new subscriptions.\r\n *\r\n * <img src=\"./img/share.png\" width=\"100%\">\r\n *\r\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method share\r\n * @owner Observable\r\n */\r\nexport function share() {\r\n    return higherOrder()(this);\r\n}\r\n;\r\n//# sourceMappingURL=share.js.map\r\n",null]}