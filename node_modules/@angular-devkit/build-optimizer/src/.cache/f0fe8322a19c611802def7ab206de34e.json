{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\util\\subscribeToResult.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\util\\subscribeToResult.js","mtime":1524743248663},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START ._root,._isArrayLike,._isPromise,._isObject,.._Observable,.._symbol_iterator,.._InnerSubscriber,.._symbol_observable PURE_IMPORTS_END */\r\nimport { root } from './root';\r\nimport { isArrayLike } from './isArrayLike';\r\nimport { isPromise } from './isPromise';\r\nimport { isObject } from './isObject';\r\nimport { Observable } from '../Observable';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { observable as Symbol_observable } from '../symbol/observable';\r\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\r\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\r\n    if (destination.closed) {\r\n        return null;\r\n    }\r\n    if (result instanceof Observable) {\r\n        if (result._isScalar) {\r\n            destination.next(result.value);\r\n            destination.complete();\r\n            return null;\r\n        }\r\n        else {\r\n            destination.syncErrorThrowable = true;\r\n            return result.subscribe(destination);\r\n        }\r\n    }\r\n    else if (isArrayLike(result)) {\r\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\r\n            destination.next(result[i]);\r\n        }\r\n        if (!destination.closed) {\r\n            destination.complete();\r\n        }\r\n    }\r\n    else if (isPromise(result)) {\r\n        result.then(function (value) {\r\n            if (!destination.closed) {\r\n                destination.next(value);\r\n                destination.complete();\r\n            }\r\n        }, function (err) { return destination.error(err); })\r\n            .then(null, function (err) {\r\n            // Escaping the Promise trap: globally throw unhandled errors\r\n            root.setTimeout(function () { throw err; });\r\n        });\r\n        return destination;\r\n    }\r\n    else if (result && typeof result[Symbol_iterator] === 'function') {\r\n        var iterator = result[Symbol_iterator]();\r\n        do {\r\n            var item = iterator.next();\r\n            if (item.done) {\r\n                destination.complete();\r\n                break;\r\n            }\r\n            destination.next(item.value);\r\n            if (destination.closed) {\r\n                break;\r\n            }\r\n        } while (true);\r\n    }\r\n    else if (result && typeof result[Symbol_observable] === 'function') {\r\n        var obs = result[Symbol_observable]();\r\n        if (typeof obs.subscribe !== 'function') {\r\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\r\n        }\r\n        else {\r\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\r\n        }\r\n    }\r\n    else {\r\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\r\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\r\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\r\n        destination.error(new TypeError(msg));\r\n    }\r\n    return null;\r\n}\r\n//# sourceMappingURL=subscribeToResult.js.map\r\n",null]}