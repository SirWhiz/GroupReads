{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular\\material\\esm5\\stepper.es5.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular\\material\\esm5\\stepper.es5.js","mtime":1524743173788},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_cdk_a11y,_angular_cdk_portal,_angular_cdk_stepper,_angular_common,_angular_core,_angular_material_button,_angular_material_core,_angular_material_icon,_angular_cdk_coercion,tslib,tslib,rxjs_Subject,_angular_cdk_bidi,rxjs_operators_takeUntil,_angular_animations PURE_IMPORTS_END */\nimport { A11yModule, FocusMonitor } from '@angular/cdk/a11y';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CdkStep, CdkStepLabel, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious } from '@angular/cdk/stepper';\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, Inject, Injectable, Input, NgModule, Optional, SkipSelf, TemplateRef, ViewChildren, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ErrorStateMatcher, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { __extends } from 'tslib';\nimport { Subject } from 'rxjs/Subject';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatStepLabel = /*@__PURE__*/ (function (_super) {\n    __extends(MatStepLabel, _super);\n    function MatStepLabel(template) {\n        return _super.call(this, template) || this;\n    }\n    return MatStepLabel;\n}(CdkStepLabel));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Stepper data that is required for internationalization.\n */\nvar MatStepperIntl = /*@__PURE__*/ (function () {\n    function MatStepperIntl() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * Label that is rendered below optional steps.\n         */\n        this.optionalLabel = 'Optional';\n    }\n    return MatStepperIntl;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatStepHeader = /*@__PURE__*/ (function () {\n    function MatStepHeader(_intl, _focusMonitor, _element, changeDetectorRef) {\n        this._intl = _intl;\n        this._focusMonitor = _focusMonitor;\n        this._element = _element;\n        _focusMonitor.monitor(_element.nativeElement, true);\n        this._intlSubscription = _intl.changes.subscribe(function () { return changeDetectorRef.markForCheck(); });\n    }\n    Object.defineProperty(MatStepHeader.prototype, \"index\", {\n        get: /**\n         * Index of the given step.\n         * @return {?}\n         */ function () { return this._index; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._index = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatStepHeader.prototype, \"selected\", {\n        get: /**\n         * Whether the given step is selected.\n         * @return {?}\n         */ function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._selected = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatStepHeader.prototype, \"active\", {\n        get: /**\n         * Whether the given step label is active.\n         * @return {?}\n         */ function () { return this._active; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._active = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatStepHeader.prototype, \"optional\", {\n        get: /**\n         * Whether the given step is optional.\n         * @return {?}\n         */ function () { return this._optional; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._optional = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatStepHeader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._intlSubscription.unsubscribe();\n            this._focusMonitor.stopMonitoring(this._element.nativeElement);\n        };\n    /** Returns string label of given step if it is a text label. */\n    /**\n     * Returns string label of given step if it is a text label.\n     * @return {?}\n     */\n    MatStepHeader.prototype._stringLabel = /**\n     * Returns string label of given step if it is a text label.\n     * @return {?}\n     */\n        function () {\n            return this.label instanceof MatStepLabel ? null : this.label;\n        };\n    /** Returns MatStepLabel if the label of given step is a template label. */\n    /**\n     * Returns MatStepLabel if the label of given step is a template label.\n     * @return {?}\n     */\n    MatStepHeader.prototype._templateLabel = /**\n     * Returns MatStepLabel if the label of given step is a template label.\n     * @return {?}\n     */\n        function () {\n            return this.label instanceof MatStepLabel ? this.label : null;\n        };\n    /** Returns the host HTML element. */\n    /**\n     * Returns the host HTML element.\n     * @return {?}\n     */\n    MatStepHeader.prototype._getHostElement = /**\n     * Returns the host HTML element.\n     * @return {?}\n     */\n        function () {\n            return this._element.nativeElement;\n        };\n    return MatStepHeader;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the Material steppers.\n */\nvar matStepperAnimations = {\n    /** Animation that transitions the step along the X axis in a horizontal stepper. */\n    horizontalStepTransition: /*@__PURE__*/ trigger('stepTransition', [\n        /*@__PURE__*/ state('previous', /*@__PURE__*/ style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),\n        /*@__PURE__*/ state('current', /*@__PURE__*/ style({ transform: 'none', visibility: 'visible' })),\n        /*@__PURE__*/ state('next', /*@__PURE__*/ style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),\n        /*@__PURE__*/ transition('* => *', /*@__PURE__*/ animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ]),\n    /** Animation that transitions the step along the Y axis in a vertical stepper. */\n    verticalStepTransition: /*@__PURE__*/ trigger('stepTransition', [\n        /*@__PURE__*/ state('previous', /*@__PURE__*/ style({ height: '0px', visibility: 'hidden' })),\n        /*@__PURE__*/ state('next', /*@__PURE__*/ style({ height: '0px', visibility: 'hidden' })),\n        /*@__PURE__*/ state('current', /*@__PURE__*/ style({ height: '*', visibility: 'visible' })),\n        /*@__PURE__*/ transition('* <=> current', /*@__PURE__*/ animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Template to be used to override the icons inside the step header.\n */\nvar MatStepperIcon = /*@__PURE__*/ (function () {\n    function MatStepperIcon(templateRef) {\n        this.templateRef = templateRef;\n    }\n    return MatStepperIcon;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nvar _MatStep = CdkStep;\nvar _MatStepper = CdkStepper;\nvar MatStep = /*@__PURE__*/ (function (_super) {\n    __extends(MatStep, _super);\n    function MatStep(stepper, _errorStateMatcher) {\n        var _this = _super.call(this, stepper) || this;\n        _this._errorStateMatcher = _errorStateMatcher;\n        return _this;\n    }\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\n    /**\n     * Custom error state matcher that additionally checks for validity of interacted form.\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    MatStep.prototype.isErrorState = /**\n     * Custom error state matcher that additionally checks for validity of interacted form.\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n        function (control, form) {\n            var /** @type {?} */ originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n            // Custom error state checks for the validity of form that is not submitted or touched\n            // since user can trigger a form change by calling for another step without directly\n            // interacting with the current form.\n            var /** @type {?} */ customErrorState = !!(control && control.invalid && this.interacted);\n            return originalErrorState || customErrorState;\n        };\n    return MatStep;\n}(CdkStep));\nvar MatStepper = /*@__PURE__*/ (function (_super) {\n    __extends(MatStepper, _super);\n    function MatStepper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Consumer-specified template-refs to be used to override the header icons.\n         */\n        _this._iconOverrides = {};\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MatStepper.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ icons = this._icons.toArray();\n            var /** @type {?} */ editOverride = icons.find(function (icon) { return icon.name === 'edit'; });\n            var /** @type {?} */ doneOverride = icons.find(function (icon) { return icon.name === 'done'; });\n            if (editOverride) {\n                this._iconOverrides[\"edit\"] = editOverride.templateRef;\n            }\n            if (doneOverride) {\n                this._iconOverrides[\"done\"] = doneOverride.templateRef;\n            }\n            // Mark the component for change detection whenever the content children query changes\n            this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(function () { return _this._stateChanged(); });\n        };\n    return MatStepper;\n}(CdkStepper));\nvar MatHorizontalStepper = /*@__PURE__*/ (function (_super) {\n    __extends(MatHorizontalStepper, _super);\n    function MatHorizontalStepper() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatHorizontalStepper;\n}(MatStepper));\nvar MatVerticalStepper = /*@__PURE__*/ (function (_super) {\n    __extends(MatVerticalStepper, _super);\n    function MatVerticalStepper(dir, changeDetectorRef) {\n        var _this = _super.call(this, dir, changeDetectorRef) || this;\n        _this._orientation = 'vertical';\n        return _this;\n    }\n    return MatVerticalStepper;\n}(MatStepper));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nvar MatStepperNext = /*@__PURE__*/ (function (_super) {\n    __extends(MatStepperNext, _super);\n    function MatStepperNext() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatStepperNext;\n}(CdkStepperNext));\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nvar MatStepperPrevious = /*@__PURE__*/ (function (_super) {\n    __extends(MatStepperPrevious, _super);\n    function MatStepperPrevious() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatStepperPrevious;\n}(CdkStepperPrevious));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatStepperModule = /*@__PURE__*/ (function () {\n    function MatStepperModule() {\n    }\n    return MatStepperModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatStepperModule, MatStepLabel, _MatStep, _MatStepper, MatStep, MatStepper, MatHorizontalStepper, MatVerticalStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MatStepperIntl, matStepperAnimations, MatStepperIcon };\n//# sourceMappingURL=stepper.es5.js.map\n",null]}