{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operator\\mergeAll.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\rxjs\\_esm5\\operator\\mergeAll.js","mtime":1524743248221},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._operators_mergeAll PURE_IMPORTS_END */\r\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable which\r\n * concurrently delivers all values that are emitted on the inner Observables.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n *\r\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\r\n *\r\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\r\n * a higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, it subscribes to that and delivers all the values from the\r\n * inner Observable on the output Observable. The output Observable only\r\n * completes once all inner Observables have completed. Any error delivered by\r\n * a inner Observable will be immediately emitted on the output Observable.\r\n *\r\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\r\n * var firstOrder = higherOrder.mergeAll();\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\r\n * var firstOrder = higherOrder.mergeAll(2);\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concatAll}\r\n * @see {@link exhaust}\r\n * @see {@link merge}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switch}\r\n * @see {@link zipAll}\r\n *\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits values coming from all the\r\n * inner Observables emitted by the source Observable.\r\n * @method mergeAll\r\n * @owner Observable\r\n */\r\nexport function mergeAll(concurrent) {\r\n    if (concurrent === void 0) {\r\n        concurrent = Number.POSITIVE_INFINITY;\r\n    }\r\n    return higherOrder(concurrent)(this);\r\n}\r\n//# sourceMappingURL=mergeAll.js.map\r\n",null]}