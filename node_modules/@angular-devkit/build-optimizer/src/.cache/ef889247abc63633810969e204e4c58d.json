{"remainingRequest":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular\\cdk\\esm5\\observers.es5.js","dependencies":[{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular\\cdk\\esm5\\observers.es5.js","mtime":1524743166828},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1524743208736},{"path":"C:\\xampp\\htdocs\\GroupReads\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1524743165754}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,_angular_cdk_coercion,rxjs_Subject,rxjs_operators_debounceTime PURE_IMPORTS_END */\nimport { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs/Subject';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nvar MutationObserverFactory = /*@__PURE__*/ (function () {\n    function MutationObserverFactory() {\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    MutationObserverFactory.prototype.create = /**\n     * @param {?} callback\n     * @return {?}\n     */\n        function (callback) {\n            return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n        };\n    return MutationObserverFactory;\n}());\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nvar CdkObserveContent = /*@__PURE__*/ (function () {\n    function CdkObserveContent(_mutationObserverFactory, _elementRef, _ngZone) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._disabled = false;\n        /**\n         * Event emitted for each change in the element's content.\n         */\n        this.event = new EventEmitter();\n        /**\n         * Used for debouncing the emitted values to the observeContent event.\n         */\n        this._debouncer = new Subject();\n    }\n    Object.defineProperty(CdkObserveContent.prototype, \"disabled\", {\n        get: /**\n         * Whether observing content is disabled. This option can be used\n         * to disconnect the underlying MutationObserver until it is needed.\n         * @return {?}\n         */ function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkObserveContent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.debounce > 0) {\n                this._ngZone.runOutsideAngular(function () {\n                    _this._debouncer.pipe(debounceTime(_this.debounce))\n                        .subscribe(function (mutations) { return _this.event.emit(mutations); });\n                });\n            }\n            else {\n                this._debouncer.subscribe(function (mutations) { return _this.event.emit(mutations); });\n            }\n            this._observer = this._ngZone.runOutsideAngular(function () {\n                return _this._mutationObserverFactory.create(function (mutations) {\n                    _this._debouncer.next(mutations);\n                });\n            });\n            if (!this.disabled) {\n                this._enable();\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkObserveContent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes['disabled']) {\n                changes['disabled'].currentValue ? this._disable() : this._enable();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CdkObserveContent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._disable();\n            this._debouncer.complete();\n        };\n    /**\n     * @return {?}\n     */\n    CdkObserveContent.prototype._disable = /**\n     * @return {?}\n     */\n        function () {\n            if (this._observer) {\n                this._observer.disconnect();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CdkObserveContent.prototype._enable = /**\n     * @return {?}\n     */\n        function () {\n            if (this._observer) {\n                this._observer.observe(this._elementRef.nativeElement, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true\n                });\n            }\n        };\n    return CdkObserveContent;\n}());\nvar ObserversModule = /*@__PURE__*/ (function () {\n    function ObserversModule() {\n    }\n    return ObserversModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { CdkObserveContent as ObserveContent, MutationObserverFactory, CdkObserveContent, ObserversModule };\n//# sourceMappingURL=observers.es5.js.map\n",null]}